// <auto-generated />
using System;
using CourseManagerApi.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseManagerApi.Api.Migrations
{
    [DbContext(typeof(CourseManagerDbContext))]
    [Migration("20240606180926_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.AccountContext.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.AccountContext.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClassContext.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressOrLink")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("AddressOrLink");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit")
                        .HasColumnName("IsOnline");

                    b.Property<Guid>("MinisterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ScheduledDate");

                    b.Property<Guid?>("TenantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("MinisterId");

                    b.HasIndex("TenantId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClassContext.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("TenantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TenantId");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClientContext.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddOnAddress")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("AddOnAddress");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("City");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Country");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("AddressNumber");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("State");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Street");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(8)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClientContext.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsSmoker")
                        .HasColumnType("bit")
                        .HasColumnName("IsSmoker");

                    b.Property<string>("Observation")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Observation");

                    b.Property<Guid?>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("OccupationId");

                    b.HasIndex("TenantId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClientContext.Entities.Occupation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.ToTable("Occupation", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClientContext.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Number");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PhoneNumber", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.CourseContext.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("TenantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.LeadContext.Entities.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdhered")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdhered");

                    b.Property<string>("Observation")
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Observation");

                    b.Property<Guid?>("TenantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TenantId");

                    b.ToTable("Lead", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.PaymentContext.Entities.Installment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Money");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PaymentStatus");

                    b.Property<Guid?>("TenantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TenantId");

                    b.ToTable("Installment", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.PaymentContext.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("NumberOfInstallments")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfInstallments");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PaymentStatus");

                    b.Property<Guid?>("TenantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("TotalPrice");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Tenant", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.AccountContext.Entities.User", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CourseManagerApi.Core.Contexts.AccountContext.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("nvarchar(120)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("CourseManagerApi.Core.Contexts.AccountContext.ValueObjects.Verification", "Verification", b2 =>
                                {
                                    b2.Property<Guid>("EmailUserId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("EmailVerificationCode");

                                    b2.Property<DateTime?>("ExpiresAt")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("EmailVerificationExpiresAt");

                                    b2.Property<DateTime?>("VerifiedAt")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("EmailVerificationVerifiedAt");

                                    b2.HasKey("EmailUserId");

                                    b2.ToTable("User");

                                    b2.WithOwner()
                                        .HasForeignKey("EmailUserId");
                                });

                            b1.Navigation("Verification")
                                .IsRequired();
                        });

                    b.OwnsOne("CourseManagerApi.Core.Contexts.AccountContext.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Name");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CourseManagerApi.Core.Contexts.AccountContext.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PasswordHash");

                            b1.Property<string>("ResetCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PasswordResetCode");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClassContext.Entities.Class", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.CourseContext.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CourseManagerApi.Core.Contexts.AccountContext.Entities.User", "Minister")
                        .WithMany()
                        .HasForeignKey("MinisterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CourseManagerApi.Core.Contexts.ClassContext.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ClassId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Name");

                            b1.HasKey("ClassId");

                            b1.ToTable("Class");

                            b1.WithOwner()
                                .HasForeignKey("ClassId");
                        });

                    b.Navigation("Course");

                    b.Navigation("Minister");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClassContext.Entities.Contract", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.ClassContext.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CourseManagerApi.Core.Contexts.ClientContext.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Client");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClientContext.Entities.Address", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.ClientContext.Entities.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClientContext.Entities.Client", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.ClientContext.Entities.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CourseManagerApi.Core.Contexts.ClientContext.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("HashedNumber")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("HashedDocumentNumber");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("DocumentNumber");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DocumentType");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("CourseManagerApi.Core.Contexts.ClientContext.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("CourseManagerApi.Core.Contexts.ClientContext.ValueObjects.Gender", "Gender", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Detail")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("GenderDetail");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("GenderType");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("CourseManagerApi.Core.Contexts.ClientContext.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("BadgeName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("BadgeName");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("FullName");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Gender")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Occupation");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClientContext.Entities.PhoneNumber", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.ClientContext.Entities.Client", "Client")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.CourseContext.Entities.Course", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CourseManagerApi.Core.Contexts.CourseContext.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(512)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Description");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("CourseManagerApi.Core.Contexts.CourseContext.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Name");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.LeadContext.Entities.Lead", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.AccountContext.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CourseManagerApi.Core.Contexts.LeadContext.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("LeadId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("LeadId");

                            b1.ToTable("Lead");

                            b1.WithOwner()
                                .HasForeignKey("LeadId");
                        });

                    b.OwnsOne("CourseManagerApi.Core.Contexts.LeadContext.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("LeadId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Name");

                            b1.HasKey("LeadId");

                            b1.ToTable("Lead");

                            b1.WithOwner()
                                .HasForeignKey("LeadId");
                        });

                    b.OwnsOne("CourseManagerApi.Core.Contexts.LeadContext.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("LeadId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AreaCode")
                                .HasMaxLength(2)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("AreaCode");

                            b1.Property<string>("Number")
                                .HasMaxLength(9)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("LeadId");

                            b1.ToTable("Lead");

                            b1.WithOwner()
                                .HasForeignKey("LeadId");
                        });

                    b.Navigation("Creator");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.PaymentContext.Entities.Installment", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.PaymentContext.Entities.Payment", "Payment")
                        .WithMany("Installments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.PaymentContext.Entities.Payment", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.ClassContext.Entities.Contract", "Contract")
                        .WithOne("Payment")
                        .HasForeignKey("CourseManagerApi.Core.Contexts.PaymentContext.Entities.Payment", "ContractId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CourseManagerApi.Core.Contexts.TenantContext.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("CourseManagerApi.Core.Contexts.AccountContext.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManagerApi.Core.Contexts.AccountContext.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClassContext.Entities.Contract", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.ClientContext.Entities.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("CourseManagerApi.Core.Contexts.PaymentContext.Entities.Payment", b =>
                {
                    b.Navigation("Installments");
                });
#pragma warning restore 612, 618
        }
    }
}
